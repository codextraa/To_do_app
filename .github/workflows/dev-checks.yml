name: Dev Environment Checks

on:
  push:
    branches: [dev-branch]
  pull_request:
    branches: [main]

jobs:
  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Matches package.json runtime
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci # Ensures exact versions from package-lock.json

      - name: Check linting with ESLint
        continue-on-error: true
        run: |
          npx eslint . --ext .js,.jsx,.ts,.tsx

      - name: Check code formatting with Prettier
        continue-on-error: true
        run: |
          npx prettier --check "**/*.{js,jsx,ts,tsx,css,json}"

  lint-and-test-backend:
    name: Lint and Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create network
        run: docker network create to-do-app-network || true

      - name: Create token file from GitHub secret
        run: echo "${{ secrets.INFISICAL_TOKEN }}" > infisical_token.txt

      - name: Build and start backend services
        run: docker compose up -d --build todo-app-backend todo-app-redis

      - name: Install linting dependencies
        run: |
          docker exec todo-app-backend sh -c "pip install black==25.1.0 pylint==3.3.4 pylint-django"

      - name: Run backend tests
        continue-on-error: true
        run: |
          docker exec todo-app-backend sh -c "cd /app && export INFISICAL_TOKEN=\$(cat /run/secrets/infisical_token) && infisical run --env=dev --path='/To-do-app/backend' python manage.py test --verbosity 2"

      - name: Show logs if tests fail
        if: failure()
        run: docker logs todo-app-backend

      - name: Check linting with Pylint
        continue-on-error: true
        run: |
          docker exec todo-app-backend sh -c "cd /app && pylint --load-plugins=pylint_django --django-settings-module=backend.settings --disable=missing-docstring,invalid-name,no-member,too-few-public-methods backend backend_api"

      - name: Check code formatting with Black
        continue-on-error: true
        run: |
          docker exec todo-app-backend sh -c "cd /app && black --check --line-length 88 ."

      - name: Stop containers and clean up
        if: always()
        run: |
          docker compose down -v
          docker network rm to-do-app-network || true

      - name: Remove token file
        if: always()
        run: rm infisical_token.txt
