name: Deploy To-Do app in AWS EC2 instance

on:
  pull_request:
    branches:
      - main
    types:
      - closed # Trigger only when PR is closed (merged)

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run if the PR was merged
    if: github.event.pull_request.merged == true
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Set up a temporary directory
            TEMP_DIR=$(mktemp -d /home/ubuntu/tmp.XXXXXX)
            cd "$TEMP_DIR"

            # Clone the repository
            git clone https://github.com/wasee-sun/To_do_app.git .

            # Write secrets to files
            echo "${{ secrets.INFISICAL_TOKEN_PROD }}" > infisical_token.txt
            echo "${{ secrets.INFISICAL_JSON_PROD }}" | base64 -d > .infisical.json
            chmod 600 infisical_token.txt .infisical.json

            # Ensure network exists
            docker network ls | grep -q web-app-network || docker network create web-app-network

            # Stop nginx if it exists
            if docker ps -a --format '{{.Names}}' | grep -q "^nginx$"; then
              echo "Stopping nginx container"
              docker stop nginx || true
            fi

            # Check and remove existing app containers if they exist
            for container in todo-app-frontend todo-app-backend todo-app-redis; do
              if docker ps -a --format '{{.Names}}' | grep -q "^${container}$"; then
                echo "Stopping and removing container: $container"
                docker stop "$container" || true
                docker rm "$container" || true
              fi
            done

            # Check and remove existing volumes if they exist
            for volume in to_do_app_backend-static to_do_app_redis-data; do
              if docker volume ls --format '{{.Name}}' | grep -q "^${volume}$"; then
                echo "Removing volume: $volume"
                docker volume rm "$volume" || true
              fi
            done

            # # Build the Docker image
            # docker-compose -p to_do_app build

            # Run the app containers
            docker-compose -p to_do_app up -d

            # Wait for todo-app-redis to be ready
            echo "Waiting for Redis to be ready..."
            timeout 60s bash -c "until docker exec todo-app-redis redis-cli ping | grep -q 'PONG'; do echo 'Redis not ready yet...'; sleep 5s; done" || { 
              echo "Redis failed to start"; 
              docker logs todo-app-redis; 
              docker stop todo-app-redis || true; 
              docker rm todo-app-redis || true; 
              exit 1; 
            }
            echo "Redis is ready!"

            # Wait for todo-app-frontend to be ready
            echo "Waiting for Frontend to be ready..."
            timeout 60s bash -c "until curl -s -f http://localhost:3000/ > /dev/null; do echo 'Frontend not ready yet...'; sleep 5s; done" || { 
              echo "Frontend failed to start"; 
              docker logs todo-app-frontend; 
              docker stop todo-app-frontend || true; 
              docker rm todo-app-frontend || true; 
              exit 1; 
            }
            echo "Frontend is ready!"

            # Wait for todo-app-backend to be ready
            echo "Waiting for Backend to be ready..."
            timeout 60s bash -c "until nc -z localhost 8000; do echo 'Backend not ready yet...'; sleep 5s; done" || { 
              echo "Backend failed to start"; 
              docker logs todo-app-backend; 
              docker stop todo-app-backend || true; 
              docker rm todo-app-backend || true; 
              exit 1; 
            }
            echo "Backend is ready!"

            # Restart nginx container
            if docker ps -a --format '{{.Names}}' | grep -q "^nginx$"; then
              echo "Starting nginx container"
              docker start nginx || { 
                echo "Failed to start nginx"; 
                exit 1; 
              }
              # Wait for nginx to be ready
              echo "Waiting for Nginx to be ready..."
              timeout 60s bash -c "until curl -s -f http://localhost:80/ > /dev/null; do echo 'Nginx not ready yet...'; sleep 5s; done" || { 
                echo "Nginx failed to start"; 
                docker logs nginx; 
                docker stop nginx || true; 
                exit 1; 
              }
              echo "Nginx is ready!"
            else
              echo "Nginx container not found, skipping restart"
            fi

            # Cleanup
            cd /home/ubuntu
            rm -f "$TEMP_DIR/infisical_token.txt"
            rm -f "$TEMP_DIR/.infisical.json"
            rm -rf "$TEMP_DIR"
